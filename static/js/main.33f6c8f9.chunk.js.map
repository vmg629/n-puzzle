{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BoardSquare","props","className","value","onClick","Board","state","gameBoardDemension","fieldSideDemension","gameBoardArray","gameWin","square","this","gameArray","flat","checkArray","sort","filter","x","push","zeroIndex","indexOf","eIndex","Math","abs","dividedArray","i","length","chunk","slice","setState","toString","initGameBoard","sqrt","boardArray","j","floor","random","row","key","handleClick","map","renderSquare","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33f6c8f9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction BoardSquare(props) {\n    return (\n      <button className={props.value === 0 ? \"square zero\" : \"square\"} onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n      gameBoardDemension: 9,\n      fieldSideDemension: 3,\n      gameBoardArray: [],\n      gameWin: false,\n    }\n  }\n\n  handleClick(square) {\n    if(this.state.gameWin || square === 0) {\n      return\n    }\n    var gameArray = this.state.gameBoardArray.flat();\n    var checkArray = gameArray.flat().sort().filter(x => x > 0);\n    checkArray.push(0);\n    var zeroIndex = gameArray.indexOf(0)\n    var eIndex = gameArray.indexOf(square)\n\n    if(Math.abs(eIndex - zeroIndex) === 1 || Math.abs(eIndex - zeroIndex) === this.state.fieldSideDemension) {\n      \n      gameArray[zeroIndex] = square;\n      gameArray[eIndex] = 0;\n\n      const dividedArray = [];\n      for (let i = 0; i < gameArray.length; i += this.state.fieldSideDemension) {\n        let chunk = gameArray.slice(i, i + this.state.fieldSideDemension);\n        dividedArray.push(chunk)\n      }\n\n      this.setState({gameBoardArray: dividedArray})\n      if(gameArray.flat().toString() === checkArray.toString()) {\n        this.setState({gameWin: true});\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.initGameBoard(this.state.gameBoardDemension);\n  }\n\n  initGameBoard(gameBoardDemension) {\n    this.setState({gameWin: false});\n    const fieldSideDemension = Math.sqrt(gameBoardDemension);\n    this.setState({fieldSideDemension: fieldSideDemension})\n    var boardArray = [];\n    //create array\n    for(let i = 0; i < gameBoardDemension; i++) {\n      boardArray.push(i)\n    }\n    //shuffle array\n    for (let i = boardArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [boardArray[i], boardArray[j]] = [boardArray[j], boardArray[i]];\n    }\n    //divide array\n    const dividedArray = [];\n    for (let i = 0; i < boardArray.length; i += fieldSideDemension) {\n      let chunk = boardArray.slice(i, i + fieldSideDemension);\n      dividedArray.push(chunk)\n    }\n    this.setState({gameBoardArray: dividedArray})\n  }\n\n  renderSquare(row, square) {\n    return (\n      <BoardSquare\n        key={square}\n        value={square}\n        onClick={() => this.handleClick(square)}\n      />\n    );\n  }\n\n  render() {    \n    const {gameBoardArray, gameWin} = this.state;\n\n    return (\n      <div>\n        <div>\n          New game: \n          <button className=\"new-game\" onClick={() => this.initGameBoard(9)}>3x3</button>\n          <button className=\"new-game\" onClick={() => this.initGameBoard(16)}>4x4</button>\n          <button className=\"new-game\" onClick={() => this.initGameBoard(25)}>5x5</button>\n        </div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            {gameBoardArray.map(row => (\n                <div className=\"board-row\" key={row}>\n                  {row.map(square => (\n                    this.renderSquare(row, square)\n                  ))}\n                </div>\n                )\n            )}\n          </div>\n        </div>\n        {gameWin && \n          <div className=\"game-status\">You win! Congratulations!</div>\n        }\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Board />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}